# Generated at {{ template_run_date }}
# For some documentation on what is this and how to use this please see clients-README file

- hosts: all
  remote_user: root
  gather_facts: no
  vars:
    {% if client_reg_server is defined %}server: {{ client_reg_server }}{% endif %}

    bootstrap_foreman_fqdn: "{% raw %}{{ server }}{% endraw %}"

    bootstrap_download_method: http
    bootstrap_org_label: "{{ sat_orglabel }}"
    bootstrap_org_name: "{{ sat_org }}"
    ###bootstrap_location: "..."   # will be set later in the play
    bootstrap_activationkey: "{{ content_activationkey }}"
    bootstrap_login: "{{ sat_user }}"
    bootstrap_password: "{{ sat_pass }}"
    bootstrap_hostgroup: "{{ content_hostgroup }}"
    bootstrap_operatingsystem: "{{ content_operatingsystem }}"
    bootstrap_additional_args: "--force"
    bootstrap_rex_args: ""   # use tag 'REM' to install remote execution ssh key via bootstrap.py, use 'REM_ONLY' to just add it to registered system
    bootstrap_puppet_args: "--skip-puppet"   # use tag 'PUP' to also install puppet via bootstrap.py, or 'PUP_ONLY' to just add it to registered system
    bootstrap_katello_args: "--skip katello-agent"   # use tag 'KAT' to also install katello-agent via bootstrap.py, or 'KAT_ONLY' to just add it to registered system
    bootstrap_target_path: /root/bootstrap.py
    bootstrap_retries: 1

    marker: "{% raw %}{{ marker }}{% endraw %}"

    recorder_server: "{{ recorder_server }}"

  tasks:
    - name: "Make sure server was set (on command line with '-e server=...' or in 'vars:' section here)"
      assert:
        that: "server is defined"

    ##################################################
    # Wait for our host to be available
    ##################################################
    # Taken from http://stackoverflow.com/questions/32896877/is-it-possible-to-catch-and-handle-ssh-connection-errors-in-ansible
    - name: "Wait for machine to be available"
      local_action: wait_for
        host="{% raw %}{{ inventory_hostname }}{% endraw %}"
        port=22
        delay=5
        timeout=300
        state=started
    - name: "Gather facts"
      setup:
        gather_subset: '!hardware'
        ###gather_timeout: 60   # available in Ansible 2.2
      tags: PUPDEPLOYSETUP
    - name: "Make sure /etc/hosts contains all capsules"
      shell: |
        {% for item in groups['satellite6'] + groups['capsules'] %}
          {% if hostvars[item].ip is defined %}
            grep {{ item }} /etc/hosts || echo "{{ hostvars[item].ip }} {{ item }}">>/etc/hosts
          {% endif %}
        {% endfor %}

    ##################################################
    # Cleanup yum caches
    ##################################################
    - name: "Fix RPM cache"
      shell: |
        rm -rf /var/lib/__db*
        rpm --rebuilddb
      tags: FIXRPM
    - name: "Cleanup yum cache"
      command:
        yum clean all
      tags: FIXRPM
    - name: "Cleanup incomplete yum transactions"
      command:
        yum-complete-transaction --cleanup-only
      tags: FIXRPM

    ##################################################
    # Clean up subscription-manager, clean up the 
    # katello-ca-consumer package and make sure
    # we don't have any broken packages
    ##################################################
    - name: "Rename /etc/rhsm-host and /etc/pki/entitlement-host"
      shell: |
        if [ -d /etc/rhsm-host ]; then mv /etc/rhsm-host{,.ORIG}; else true; fi
        if [ -d /etc/pki/entitlement-host ]; then mv /etc/pki/entitlement-host{,.ORIG}; else true; fi
      tags:
        - REG
        - FIXREG
    - name: "Remove other repos which might be broken"
      shell:
        rm -f /etc/yum.repos.d/*.repo
      tags: REG
    - name: Increase the RHSM timeout
      lineinfile:
        dest: /usr/lib64/python2.7/site-packages/rhsm/config.py
        regexp: "^DEFAULT_SERVER_TIMEOUT"
        line: 'DEFAULT_SERVER_TIMEOUT = "380"'
        state: present
      tags: REGTIMEOUTTWEAK
    ###- pause: prompt="Press Enter to start registering"
    #################################################
    # Start registering with RHSM and attach to the
    # pool
    #################################################
    - name: "Set location name when registering directly to Satellite"
      set_fact:
        bootstrap_location: "Default Location"
      when: "'{{ groups['satellite6']|first }}' == server"
      ignore_errors: true
      tags: REG
    - name: "Determine location name when registering to Capsule"
      set_fact:
        bootstrap_location: "Location for {% raw %}{{ server }}{% endraw %}"
      when: "'{{ groups['satellite6']|first }}' != server"
      ignore_errors: true
      tags: REG

    - name: "Download bootstrap.py from {% raw %}{{ bootstrap_foreman_fqdn }}{% endraw %}"
      get_url:
        dest: "{% raw %}{{ bootstrap_target_path }}{% endraw %}"
        url: "{% raw %}{{ bootstrap_download_method }}://{{ bootstrap_foreman_fqdn }}/pub/bootstrap.py{% endraw %}"
      tags: REG

    - name: "WORKAROUND: We are not using normal RHEL, so pretend it is not installed"
      file:
        path: "{% raw %}{{ item }}{% endraw %}"
        state: absent
      with_items:
        - /etc/pki/product-default/69.pem
        - /etc/pki/product/69.pem
    - name: "WORKAROUND: Disable product id checks in yum"
      lineinfile:
        dest: /etc/yum/pluginconf.d/product-id.conf
        regexp: "^enabled"
        line: 'enabled=0'
        state: present
    - name: "Generate bootstrap.py arguments"
      set_fact:
        bootstrap_args: "{% raw %}--server {{ bootstrap_foreman_fqdn }} --activationkey '{{ bootstrap_activationkey }}' --download-method {{ bootstrap_download_method }}{% endraw %}"
        bootstrap_foreman_args: "{% raw %}{% if bootstrap_password != '' %}--login '{{ bootstrap_login }}' --password '{{ bootstrap_password }}' --hostgroup '{{ bootstrap_hostgroup }}' --location '{{ bootstrap_location }}' --organization '{{ bootstrap_org_name }}' --operatingsystem '{{ bootstrap_operatingsystem }}'{% else %}--skip foreman --organization '{{ bootstrap_org_label }}'{% endif %}{% endraw %}"
      tags: REG
    - name: "Add Puppet bootstrap.py argument when requested via tag"
      set_fact:
        bootstrap_puppet_args: ""
      tags: PUP
    - name: "Add katello-agent bootstrap.py argument when requested via tag"
      set_fact:
        bootstrap_katello_args: ""
      tags: KAT
    - name: "Add ReX bootstrap.py argument when requested via tag"
      set_fact:
        bootstrap_rex_args: "--rex"
      tags: REM
    - name: "Run bootstrap.py"
      shell: "set -x; subscription-manager clean; rm -f /etc/pki/product*/*.pem; {% raw %}python {{ bootstrap_target_path }} {{ bootstrap_args }} {{ bootstrap_foreman_args }} {{ bootstrap_puppet_args }} {{ bootstrap_katello_args}} {{ bootstrap_rex_args }} {{ bootstrap_additional_args }}{% endraw %}"
      environment:
        TZ: UTC   # make sure returned times are in UTC
      register: reg
      until: "reg.rc is defined and reg.rc == 0"
      retries: "{% raw %}{{ bootstrap_retries }} {% endraw %}"
      delay: 10
      tags: REG
    - name: "Register - timings"
      debug:
        msg="Register {% raw %}{{ reg.start }}{% endraw %} to {% raw %}{{ reg.end }}{% endraw %}"
      tags: REG

    ##################################################
    # Fix registration if needed
    ##################################################
    - name: "Fix registration if said so"
      shell: |
        if ! yum repolist | grep 'Default_Organization_RHEL7_x86_64_Base_rhel7-x86_64-base'; then
          subscription-manager clean
          yum --disablerepo=\* -y remove katello-ca-consumer-\*
          rpm -Uvh "http://{% raw %}{{ server }}{% endraw %}/pub/katello-ca-consumer-latest.noarch.rpm"
          subscription-manager register --org "{{ sat_orglabel }}" --environment Library --username "{{ sat_user }}" --password "{{ sat_pass }}" --force
          pool=$( subscription-manager list --available --all --matches "{{ content_rhel_name }}" --pool-only )
          subscription-manager attach --pool "$pool"
          pool=$( subscription-manager list --available --all --matches "{{ content_sattools_name }}" --pool-only )
          subscription-manager attach --pool "$pool"
        fi
      tags:
        - FIXREG

    ##################################################
    # Make sure katello-agent is clean installed
    # and not already present.
    ##################################################
    - name: "Remove katello-agent when installed"
      yum:
        name=katello-agent
        state=absent
      tags: KAT_ONLY
    - name: "Remove gofer when installed"
      yum:
        name=gofer
        state=absent
      tags: KAT_ONLY
    - name: "Install katello-agent"
      action:
        yum
          name=katello-agent
          state=latest
      register: installed
      until: "installed.rc is defined and installed.rc == 0"
      retries: 10
      delay: 10
      tags:
        - KAT_ONLY
        - FIXKAT
        - INSTKAT
    - name: "Kill journald if it is running"
      shell:
        pkill --full --exact '/usr/lib/systemd/systemd-journald' || true
      tags:
        - KAT_ONLY
        - FIXKAT
    - name: "Kill goferd if it is running"
      shell:
        pkill --full --exact 'python /usr/bin/goferd --foreground' || true
      tags:
        - KAT_ONLY
        - FIXKAT
    - name: "Start goferd"
      service:
        name: goferd
        state: started
        enabled: yes
      tags:
        - KAT_ONLY
        - FIXKAT

    ##################################################
    # Start downgrading some packages so that we
    # can have some errata applicable to our
    # clients.
    ##################################################
    - name: "Downgrade more packages to have applicable errata, needs katello-agent running"
      command:
        yum -y downgrade ksh-20120801-22.el7_1.2 mailx-12.5-11.el7 tcpdump-4.5.1-2.el7 parted-3.1-23.el7 psmisc-22.20-8.el7 screen-4.1.0-0.22.20120314git3c2946.el7
      ignore_errors: true
      tags: DOWNGRADE
    - name: "Install outdated ksh package so it adds to applicable errata, needs katello-agent runninng"
      command:
        yum -y install ksh-20120801-22.el7_1.2
      tags: DOWNGRADE

    ##################################################
    # Make sure journald is not running
    ##################################################
    - name: "Kill journald if it is running"
      shell:
        pkill --full --exact '/usr/lib/systemd/systemd-journald' || true
      tags: KATSTOP
    - name: "Kill goferd if it is running"
      shell:
        pkill --full --exact 'python /usr/bin/goferd --foreground' || true
      tags: KATSTOP

    ##################################################
    # Clean up puppet and register puppet host
    ##################################################
    - name: "Remove puppet certs if any"
      shell:
        rm -rf /var/lib/puppet/ssl/*
      tags:
        - PUP_ONLY
        - PUP_SETUP_ONLY
    - name: "Hostname is a prerequisity of puppet - see bug 1540068"
      yum:
        name: hostname
        state: present
      tags:
        - PUP_ONLY
        - PUP_SETUP_ONLY
    - name: "Install puppet"
      yum:
        name: puppet
        state: latest
      register: installed
      until: "installed.rc is defined and installed.rc == 0"
      retries: 10
      delay: 10
      tags:
        - PUP_ONLY
        - PUP_SETUP_ONLY
    - name: "Set puppet server"
      command:
        /usr/bin/puppet config set server "{% raw %}{{ server }}{% endraw %}" --section agent
      tags:
        - PUP_ONLY
        - PUP_SETUP_ONLY
    - name: "Set puppet ca_server"
      command:
        /usr/bin/puppet config set ca_server "{% raw %}{{ server }}{% endraw %}" --section agent
      tags:
        - PUP_ONLY
        - PUP_SETUP_ONLY
    - name: "Set puppet environment"
      command:
        /usr/bin/puppet config set environment "{% raw %}{{ content_puppet_env }}{% endraw %}" --section agent
      tags:
        - PUP_ONLY
        - PUP_SETUP_ONLY
    ###- pause: prompt="Press Enter to start registering puppet"
    - name: "Register puppet host"
      shell:
        /usr/bin/puppet agent --test --noop --tags no_such_tag --waitforcert 10
      register: reg
      tags:
        - PUP_ONLY
        - PUP_REG_ONLY
    - name: "Register puppet host - timings"
      debug:
        msg="RegisterPuppet {% raw %}{{ reg.start }}{% endraw %} to {% raw %}{{ reg.end }}{% endraw %}"
      tags:
        - PUP_ONLY
        - PUP_REG_ONLY

    ##################################################
    # Stop puppet service
    ##################################################
    - name: "Stop and disable puppet daemon"
      service:
        name: puppet
        state: stopped
        enabled: false
      tags:
        - PUP_STOP

    ##################################################
    # Configure puppet on satellite for given 
    # containers
    ##################################################
    # We need to serialize these hammer calls because of https://bugzilla.redhat.com/show_bug.cgi?id=1336007
    - name: "Configure puppet stuff on Sat for given container"
      command:
        hammer -u "{{ sat_user }}" -p "{{ sat_pass }}" host update --name "{% raw %}{{ hostvars[item]['ansible_fqdn'] }}{% endraw %}" --puppet-proxy "{% raw %}{{ server }}{% endraw %}" --puppet-ca-proxy "{% raw %}{{ server }}{% endraw %}" --environment "{% raw %}{{ content_puppet_env }}{% endraw %}" --puppet-classes "{% raw %}{{ content_puppet_module_name }}{% endraw %}"
      with_items: "{% raw %}{{ groups['all'] }}{% endraw %}"
      when: item != 'localhost'
      run_once: true
      delegate_to: "{{ groups['satellite6']|first }}"
      ignore_errors: true
      tags: PUPDEPLOYSETUP
    ###- pause: prompt="Press Enter to start puppet pickup"
    ###  tags: PUPDEPLOYSETUP

    ##################################################
    # Deploy puppet
    ##################################################
    - name: "Pickup puppet action"
      command:
        /usr/bin/puppet agent --onetime --no-daemonize
      register: pickup
      tags: PUPDEPLOY
    - name: "Pickup puppet action - timings"
      debug:
        msg="PickupPuppet {% raw %}{{ pickup.start }}{% endraw %} to {% raw %}{{ pickup.end }}{% endraw %}"
      tags: PUPDEPLOY
    - name: "Check if file was created"
      action: command
        cat "{% raw %}{{ content_puppet_module_file }}{% endraw %}"
      register: deployed
      until: "deployed.rc is defined and deployed.rc == 0"
      retries: 30
      delay: 1
      tags: PUPDEPLOY
    - name: "Check if file was created - timings"
      debug:
        msg="PickupDeployed {% raw %}{{ deployed.start }}{% endraw %} to {% raw %}{{ deployed.end }}{% endraw %}"
      tags: PUPDEPLOY

    ##################################################
    # We need to have some place for storing our
    # ssh data
    ##################################################
    - name: "Make sure /root/.ssh/ exists"
      file:
        path: /root/.ssh
        state: directory
        mode: 0700
      tags: REM_ONLY
    - name: "Obtain remote execution SSH key"
      action:
        command curl --insecure "https://{% raw %}{{ server }}{% endraw %}:9090/ssh/pubkey"
      register: ssh_key
      tags: REM_ONLY
    - name: "Deploy remote execution SSH key"
      authorized_key:
        user: root
        state: present
        key: "{% raw %}{{ ssh_key.stdout }}{% endraw %}"
      tags: REM_ONLY

    ##################################################
    # Gather some system data on Satellite
    ##################################################
    - name: "Gather lsof on Sat"
      delegate_to: "{{ groups['satellite6']|first }}"
      shell: lsof | cut -d ' ' -f 1 | sort | uniq -c | sort -n | tail -n 50 >"/root/lsof-sat-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
      tags: STATS
    #  register: lsof_command
    #  run_once: true
    #- name: "Save lsof log from Sat"
    #  local_action:
    #    copy content="{% raw %}{{ lsof_command.stdout }}{% endraw %}" dest="/root/lsof-sat-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
    #  run_once: true
    #  tags: STATS
    - name: "Gather qpid on Sat"
      delegate_to: "{{ groups['satellite6']|first }}"
      shell: qpid-stat --ssl-certificate=/etc/pki/katello/qpid_client_striped.crt -b amqps://localhost:5671 -g >"/root/qpidstat-sat-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
      tags: STATS
    #  register: qpidstat_command
    #  run_once: true
    #- name: "Save qpid log from Sat"
    #  local_action:
    #    copy content="{% raw %}{{ qpidstat_command.stdout }}{% endraw %}" dest="/root/qpidstat-sat-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
    #  run_once: true
    #  tags: STATS
    - name: "Gather memory use on Sat"
      delegate_to: "{{ groups['satellite6']|first }}"
      shell: ps --no-headers -eo rss,comm>a; for comm in $( sed 's/^\s*[0-9]\+\s*\(.*\)$/\1/' a | sort -u ); do size=$( grep "\s$comm" a | sed 's/^\s*\([0-9]\+\)\s*.*$/\1/' | paste -sd+ - | bc ); echo "$size $comm"; done | sort -n | tail -n 50 >"/root/memory-sat-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
      tags: STATS
    #  register: memory_command
    #  run_once: true
    #- name: "Save memory use log from Sat"
    #  local_action:
    #    copy content="{% raw %}{{ memory_command.stdout }}{% endraw %}" dest="/root/memory-sat-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
    #  run_once: true
    #  tags: STATS
    - name: "Gather passenger-status on Sat"
      delegate_to: "{{ groups['satellite6']|first }}"
      shell: passenger-status >"/root/passengerstatus-sat-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
      tags: STATS
    #  register: passengerstatus_command
    #  run_once: true
    #- name: "Save passenger-status log from Sat"
    #  local_action:
    #    copy content="{% raw %}{{ passengerstatus_command.stdout }}{% endraw %}" dest="/root/passengerstatus-sat-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
    #  run_once: true
    #  tags: STATS

    ##################################################
    # Gather some system data on capsule
    ##################################################
    - name: "Gather lsof on Capsule"
      delegate_to: "{% raw %}{{ server }}{% endraw %}"
      shell: lsof | cut -d ' ' -f 1 | sort | uniq -c | sort -n | tail -n 50 >"/root/lsof-capsule-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
      tags: STATC
    #  register: lsof_command
    #  run_once: true
    #- name: "Save lsof log from Capsule"
    #  local_action:
    #    copy content="{% raw %}{{ lsof_command.stdout }}{% endraw %}" dest="/root/lsof-capsule-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
    #  run_once: true
    #  tags: STATC
    - name: "Gather qpid on Capsule"
      delegate_to: "{% raw %}{{ server }}{% endraw %}"
      shell: qpid-stat --ssl-certificate=/etc/pki/katello/qpid_client_striped.crt -b amqps://localhost:5671 -g >"/root/qpidstat-capsule-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
      tags: STATC
    #  register: qpidstat_command
    #  run_once: true
    #- name: "Save qpid log from Capsule"
    #  local_action:
    #    copy content="{% raw %}{{ qpidstat_command.stdout }}{% endraw %}" dest="/root/qpidstat-capsule-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
    #  run_once: true
    #  tags: STATC
    - name: "Gather memory use on Capsule"
      delegate_to: "{% raw %}{{ server }}{% endraw %}"
      shell: ps --no-headers -eo rss,comm>a; for comm in $( sed 's/^\s*[0-9]\+\s*\(.*\)$/\1/' a | sort -u ); do size=$( grep "\s$comm" a | sed 's/^\s*\([0-9]\+\)\s*.*$/\1/' | paste -sd+ - | bc ); echo "$size $comm"; done | sort -n | tail -n 50 >"/root/memory-capsule-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
      tags: STATC
    #  register: memory_command
    #  run_once: true
    #- name: "Save memory use log from Capsule"
    #  local_action:
    #    copy content="{% raw %}{{ memory_command.stdout }}{% endraw %}" dest="/root/memory-capsule-{% raw %}{{ ansible_date_time.date }}{% endraw %}-{% raw %}{{ ansible_date_time.time }}{% endraw %}-{% raw %}{{ ansible_date_time.tz }}{% endraw %}.log"
    #  run_once: true
    #  tags: STATC

    ##################################################
    # Restart the satellite
    ##################################################
    - name: "Restart Sat"
      delegate_to: "{{ groups['satellite6']|first }}"
      shell: katello-service restart
      run_once: true
      tags: RESTART
    - name: "Drop caches on Sat"
      delegate_to: "{{ groups['satellite6']|first }}"
      shell: echo 3 > /proc/sys/vm/drop_caches
      run_once: true
      tags: RESTART

    ##################################################
    # Clean up the yum cache
    ##################################################
    - name: "Clean yum cache"
      shell:
        rm -rf /var/cache/yum/*
    - name: "Drop caches on localhost"
      local_action:
        shell echo 3 > /proc/sys/vm/drop_caches
      run_once: true
